{'type': 'V', 'text': ''}
{'type': 'V', 'text': '  custom_param :template_id  custom_param :doctor_id  create_many :answers  create_many :boundaries  create_one :units  create_one :norm_boundaries  copy_reference :method_type  copy_reference :method_material  copy_reference :dimension  copy_reference :currency'}
{'type': 'V', 'text': '  '}
{'type': 'V', 'text': '  -1'}
{'type': 'v', 'text': 'ApplicationClonner'}
{'type': 'v', 'text': 'r'}
{'type': 'V', 'text': 'class DirectionInfo::Procedure '}
{'type': 'V', 'text': '  class DirectionInfo::Procedure '}
{'type': 'v', 'text': '< DirectionInfo::DoctorReferral'}
{'type': 'V', 'text': 'class DirectionInfo::LaboratoryDirection < '}
{'type': 'v', 'text': 'DirectionInfo::DoctorReferral'}
{'type': 'V', 'text': 'class DirectionInfo::HospitalizationDirection '}
{'type': 'V', 'text': 'class DirectionInfo::ConsultationDirection < '}
{'type': 'V', 'text': '    # resource_params_for_create_all.map do |param|    #   templ_attributes = param.delete(:template_attributes)    #   resource_class.transaction do    #     if @current_user.doctor_now?    #       param[:appointment_request_attributes][:created_doctor_id] = @current_user.doctor.id    #     elsif @current_user.admin_now?    #       param[:appointment_request_attributes][:created_admin_id] = @current_user.administrator.id    #     end    #    #     direction = resource_class.create!(param)    #     if templ_attributes.present?    #       self.class::TEMPLATE_CLASS.create!(templ_attributes.merge(category_id: direction.category_id))    #     end    #     direction    #   end    # end'}
{'type': 'v', 'text': 'flat_'}
{'type': 'v', 'text': 'par[:access_rights_attributes]'}
{'type': 'v', 'text': '[:access_rights_attributes]'}
{'type': 'V', 'text': '      -1]'}
{'type': 'v', 'text': 'unless'}
{'type': 'v', 'text': '-'}
{'type': 'v', 'text': 'resource_params_for_create_all'}
{'type': 'v', 'text': ' '}
{'type': 'V', 'text': '  def create_params  end'}
{'type': 'V', 'text': '    pry binding'}
{'type': 'V', 'text': '  # def create_all  #   create_params = resource_params_for_create_all  #  #   if params[:template].present?  #     Drugs::Pattern::Creator.new(current_user: @current_user, template_params: params[:template], drugs_params: create_params).call  #   end  #  #   resource_class.create!(create_params)  #  #   head :ok  # end'}
{'type': 'V', 'text': 'require ''direction_info/abstract_identifier'''}
{'type': 'V', 'text': '           foreign_key: :referral_id'}
{'type': 'v', 'text': 'doctor_'}
{'type': 'v', 'text': 'association'}
{'type': 'V', 'text': '  # def self.inherited(base)  # def self.inherited(base)  #   return if base.base_class == base    # base._reflections.merge! base.base_class._reflections  # end  # end'}
{'type': 'v', 'text': '      def _reflect_on_association(association) #:nodoc:        _reflections[association.to_s]      end'}
{'type': 'V', 'text': '  include ActiveRecord::Reflection'}
{'type': 'V', 'text': '    base_class._reflections.merge super'}
{'type': 'v', 'text': 'super '}
{'type': 'v', 'text': '_reflections'}
{'type': 'V', 'text': '  self.abstract_class = true'}
{'type': 'v', 'text': 'super'}
{'type': 'V', 'text': '  def self.inherited(base)    def base._reflections      base_class._reflections.merge super    end  end'}
{'type': 'v', 'text': 'base_class._reflections'}
